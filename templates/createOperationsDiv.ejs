<div>
  <div className="container mt-4">
    {fields.map((field, index) => {
      if (field.name !== 'id' && !regex.test(field.name)) {
        if (field.foreign) {
          const options = foreignkeyData[field.foreign] || [];
          const filteredOptions = options.filter((option) =>
            option[field.foreign_field].toLowerCase().includes((searchQueries[field.name] || '').toLowerCase())
          );
          return (
            <div key={index} className="dropdown">
              <label style={{ display: 'block' }}>
                {field.required && <span style={{ color: 'red' }}>*</span>} {field.name}
              </label>
              <button
                className="btn btn-secondary dropdown-toggle"
                type="button"
                id={`dropdownMenu-${field.name}`}
                data-bs-toggle="dropdown"
                aria-haspopup="true"
                aria-expanded="false"
              >
                {dataToSave[field.name]
                  ? options.find((item) => item[field.foreign_field] === dataToSave[field.name])?.[field.foreign_field] || 'Select'
                  : `Select ${field.name}`}
              </button>
              <div className="dropdown-menu" aria-labelledby={`dropdownMenu-${field.name}`}>
                <input
                  type="text"
                  className="form-control mb-2"
                  placeholder={`Search ${field.name}`}
                  value={searchQueries[field.name] || ''}
                  onChange={(e) => handleSearchChange(field.name, e.target.value)}
                />
                
                {filteredOptions.length > 0 ? (
                  filteredOptions.map((option, i) => (
                    <button
                      key={i}
                      className="dropdown-item"
                      type="button"
                      onClick={() => {
                        setDataToSave({ ...dataToSave, [field.name]: option[field.foreign_field] });
                      }}
                    >
                      {option[field.foreign_field]}
                    </button>
                  ))
                ) : (
                  <span className="dropdown-item text-muted">No options available</span>
                )}
              </div>
            </div>
          );
        } else {
          return (
            <div key={index} style={{ marginBottom: '10px' }}>
              <label style={{ display: 'block' }}>
                {field.required && <span style={{ color: 'red' }}>*</span>} {field.name}
              </label>
              <input
                type={field.type}
                name={field.name}
                required={field.required}
                placeholder={field.name}
                value={dataToSave[field.name] || ''}
                onChange={(e) => setDataToSave({ ...dataToSave, [e.target.name]: e.target.value })}
                style={{ padding: '5px', width: '100%' }}
              />
            </div>
          );
        }
      }
      return null;
    })}
    <button className="btn btn-success" onClick={handleCreate}>
      Create
    </button>
  </div>
  {showToast && (
    <div
      className="toast-container position-fixed top-20 start-50 translate-middle p-3"
      style={{ zIndex: 1550 }}
    >
      <div className="toast show" role="alert" aria-live="assertive" aria-atomic="true">
        <div className="toast-header">
          <strong className="me-auto">Success</strong>
          <button
            type="button"
            className="btn-close"
            data-bs-dismiss="toast"
            aria-label="Close"
            onClick={() => setShowToast(false)}
          ></button>
        </div>
        <div className="toast-body text-success text-center">Created successfully!</div>
      </div>
    </div>
  )}
</div>